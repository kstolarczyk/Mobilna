// <auto-generated />
using System;
using Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Core.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201103154201_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9");

            modelBuilder.Entity("Core.Models.GrupaObiektow", b =>
                {
                    b.Property<int>("GrupaObiektowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OstatniaAktualizacja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Usunieta")
                        .HasColumnType("INTEGER");

                    b.HasKey("GrupaObiektowId");

                    b.HasIndex("UserId");

                    b.ToTable("GrupyObiektow");
                });

            modelBuilder.Entity("Core.Models.GrupaObiektowTypParametrow", b =>
                {
                    b.Property<int>("GrupaObiektowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypParametrowId")
                        .HasColumnType("INTEGER");

                    b.HasKey("GrupaObiektowId", "TypParametrowId");

                    b.HasIndex("TypParametrowId");

                    b.ToTable("GrupaObiektowTypParametrow");
                });

            modelBuilder.Entity("Core.Models.Obiekt", b =>
                {
                    b.Property<int>("ObiektId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GrupaObiektowId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OstatniaAktualizacja")
                        .HasColumnType("TEXT");

                    b.Property<int?>("RemoteId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Usuniety")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zdjecie")
                        .HasColumnType("TEXT");

                    b.Property<string>("ZdjecieLokal")
                        .HasColumnType("TEXT");

                    b.HasKey("ObiektId");

                    b.HasIndex("GrupaObiektowId");

                    b.HasIndex("UserId");

                    b.ToTable("Obiekty");
                });

            modelBuilder.Entity("Core.Models.Parametr", b =>
                {
                    b.Property<int>("ParametrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObiektId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypParametrowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Wartosc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ParametrId");

                    b.HasIndex("ObiektId");

                    b.HasIndex("TypParametrowId");

                    b.ToTable("Parametry");
                });

            modelBuilder.Entity("Core.Models.TypParametrow", b =>
                {
                    b.Property<int>("TypParametrowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AkceptowalneWartosci")
                        .HasColumnType("TEXT");

                    b.Property<int?>("GrupaObiektowId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JednostkaMiary")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("OstatniaAktualizacja")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<string>("TypDanych")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Usuniety")
                        .HasColumnType("INTEGER");

                    b.HasKey("TypParametrowId");

                    b.HasIndex("GrupaObiektowId");

                    b.ToTable("TypyParametrow");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("EncodedPassword")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Models.GrupaObiektow", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany("GrupyObiektow")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Models.GrupaObiektowTypParametrow", b =>
                {
                    b.HasOne("Core.Models.GrupaObiektow", "GrupaObiektow")
                        .WithMany("GrupaObiektowTypParametrow")
                        .HasForeignKey("GrupaObiektowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.TypParametrow", "TypParametrow")
                        .WithMany()
                        .HasForeignKey("TypParametrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Obiekt", b =>
                {
                    b.HasOne("Core.Models.GrupaObiektow", "GrupaObiektow")
                        .WithMany("Obiekty")
                        .HasForeignKey("GrupaObiektowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Core.Models.Parametr", b =>
                {
                    b.HasOne("Core.Models.Obiekt", "Obiekt")
                        .WithMany("Parametry")
                        .HasForeignKey("ObiektId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.TypParametrow", "TypParametrow")
                        .WithMany()
                        .HasForeignKey("TypParametrowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.TypParametrow", b =>
                {
                    b.HasOne("Core.Models.GrupaObiektow", null)
                        .WithMany("TypyParametrow")
                        .HasForeignKey("GrupaObiektowId");
                });
#pragma warning restore 612, 618
        }
    }
}
